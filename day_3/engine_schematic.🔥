"""
- The problemset reminds me of common convolutions in ConvNets: sliding a window (kernel) over an image
- padding around the input image with "."
- differnece here: for each number only observing surroundings once, checking for symbols
"""

from tensor import Tensor, TensorShape
from sys.info import simdwidthof
from utils.index import Index
from utils.vector import DynamicVector
from math import clamp

alias char_type = DType.uint8 # ASCII chars, uint8 = 256 should suffice
alias simd_width = simdwidthof[char_type]()


fn main() raises:
    let width: Int = 140
    let height: Int = 140

    # if I have the starting position and length of all numbers I can check their surroundings
    let low_end = ord("0")
    let high_end = ord("9")

    # digits and "."
    var non_symbols = SIMD[char_type, simd_width](ord("."))
    for i in range(ord("0"), ord("9") + 1):
        non_symbols[i - ord("0")] = i
    non_symbols[10] = ord(".")

    var dig_counter: UInt8 = 0
    var occurence = SIMD[char_type, 4]()

    var occurences = DynamicVector[SIMD[char_type, 4]]()
    var valid_part_numbers = DynamicVector[SIMD[DType.uint16, 1]]()

    # create a 2D "map" of the input
    var map = Tensor[char_type]().fromfile("input.txt")
    let desired_shape = TensorShape(height, width + 1)
    map.ireshape(desired_shape)
    for i in range(height):
        for j in range(width + 1):
            let val = map[Index(i, j)]
            if val >= low_end and val <= high_end:
                if dig_counter == 0:
                    occurence[0] = i
                    occurence[1] = j
                dig_counter += 1
            else:
                if dig_counter > 0:
                    occurences.append(SIMD[char_type, 4](occurence[0], occurence[1], dig_counter))
                dig_counter = 0

    # loop over results and collect part numbers
    for i in range(len(occurences)):
        let occurence = occurences[i]
        let middle_row = occurence[0].to_int()
        let start_col = occurence[1].to_int()
        let occ_len = occurence[2].to_int()

        let middle_clamped_low = clamp[DType.int16, 1](middle_row - 1, 0, height)
        let middle_clamped_high = clamp[char_type, 1](middle_row + 2, 0, height)

        let start_clamped_col = clamp[DType.int16, 1](start_col - 1, 0, width)
        let end_clamped_col = clamp[char_type, 1](start_col + occ_len + 1, 0, width)

        # simd_width is 16, enough for a max of 3*5 elements
        var map_clipping = SIMD[char_type, simd_width](46) # defautl ASCII 46 = "."
        var count: Int = 0

        # get all relevant fields (incl. neighbours)
        for k in range(middle_clamped_low.to_int(), middle_clamped_high.to_int()):
            for l in range(start_clamped_col.to_int(), end_clamped_col.to_int()):
                map_clipping[count] = map[Index(k, l)]
                count += 1
        
        # assemble part number from digits on the map
        for i in range(len(map_clipping)):
            if is_symbol(map_clipping[i].to_int(), non_symbols):
                var part_no: String = ""
                for j in range(start_col, start_col + occ_len):
                    part_no = part_no.__add__(str(chr(map[middle_row, j].to_int())))
                valid_part_numbers.append(atol(part_no))
                break # after finding one symbol we can stop
    
    var sum_part_numbers: UInt32 = 0
    for i in range(len(valid_part_numbers)):
        sum_part_numbers += valid_part_numbers[i].to_int()

    print("sum of part numbers:", sum_part_numbers)
        

# If any of the elements is not a . or number, then it's a symbol and therefore it's a part_number
fn is_symbol(elem: SIMD[char_type, 1], non_symbols: SIMD[char_type, simd_width]) -> Bool:
    var found: Bool = True
    for i in range(len(non_symbols)):
        if elem == non_symbols[i]:
            found = False
            break
    return found
        