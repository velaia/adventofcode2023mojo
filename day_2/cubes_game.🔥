# Which games would have been possible if the bag had been loaded with:
# 12 red cubes, 13 green cubes, and 14 blue cubes

# could use SIMD or Tensor for comparison


from tensor import Tensor
from math import greater, any_true
from sys.info import simdwidthof

alias num_colors_type = DType.uint8
alias simd_width: Int = simdwidthof[num_colors_type]()
alias simd_bool_width: Int = simdwidthof[DType.bool]()

fn main() raises:
    var f: FileHandle = open("input.txt", "r")
    let lines = f.read().split("\n")
    f.close()
    var sum_possible_games: Int32 = 0

    var max_values = Tensor[num_colors_type](3)
    max_values[0] = 12
    max_values[1] = 13
    max_values[2] = 14

    for i in range(lines.__len__()):
        let line = lines[i]
        if len(line) > 0:
            let line_values = line.split(": ")
            let game = line_values[0].split(" ")[1] # number of the game
            print("Game: ", game)

            let cube_values_unformatted = line_values[1].split('; ')
            var one_game_rgbs = SIMD[DType.bool, simd_bool_width]()
            # print(one_game_rgbs.num_elements())
            for j in range(len(cube_values_unformatted)):
                let cube_values = cv_unformatted_to_tensor[UInt8](cube_values_unformatted[j])

                let result_comparison = greater[num_colors_type, simd_width](cube_values.simd_load[simd_width](0), max_values.simd_load[simd_width](0))
                one_game_rgbs[j] = any_true[simd_width](result_comparison)

            # is any of the number of cubes bigger than the maximum allowed number?
            let game_impossible = any_true[simd_bool_width](one_game_rgbs)
            print("any draw bigger than max_values: ", one_game_rgbs.__str__(),
                "any_true: ", any_true[simd_bool_width](one_game_rgbs)
            )
            if not game_impossible:
                sum_possible_games += atol(game)
    
    print("\n\nSum of the IDs of the possible games: ", sum_possible_games)




fn cv_unformatted_to_tensor[type: UInt8](one_draw: String) raises -> Tensor[num_colors_type]:
    var rgb = Tensor[num_colors_type](3)

    # format: 3 green, 2 red, 3 blue
    let colors = one_draw.split(", ")

    for i in range(len(colors)):
        let num_name = colors[i].split(" ")

        let color = num_name[1]
        let count = num_name[0]

        # print("color", color, " - count", count)

        if color == "red":
            rgb[0] = atol(count)
        elif color == "green":
            rgb[1] = atol(count)
        else:
            rgb[2] = atol(count)

    print(rgb.__str__())

    return rgb
    